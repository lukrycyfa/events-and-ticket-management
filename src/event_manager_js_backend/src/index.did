service: () -> {
    addEvent: (record {eventStart:nat64; title:text; description:text; eventLocation:text; bannerUrl:text; eventEnd:nat64}) -> (variant {Ok:record {id:text; eventStart:nat64; title:text; manager:principal; tickets:vec text; ticketClasses:vec text; createdAt:nat64; description:text; soldOut:nat64; updatedAt:nat64; eventLocation:text; bannerUrl:text; eventEnd:nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}});
    addTicketClass: (record {title:text; badgeUrl:text; cost:nat64}, text) -> (variant {Ok:record {id:text; title:text; badgeUrl:text; cost:nat64; createdAt:nat64; updatedAt:nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}});
    deleteEvent: (text) -> (variant {Ok:text; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}});
    deleteTicket: (text) -> (variant {Ok:text; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}});
    deleteTicketClass: (text, text) -> (variant {Ok:text; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}});
    getAddressFromPrincipal: (principal) -> (text) query;
    getAllEvents: () -> (vec record {id:text; eventStart:nat64; title:text; manager:principal; tickets:vec text; ticketClasses:vec text; createdAt:nat64; description:text; soldOut:nat64; updatedAt:nat64; eventLocation:text; bannerUrl:text; eventEnd:nat64}) query;
    getAttendeeTickets: () -> (variant {Ok:record {id:text; tickets:vec record {id:text; eventId:text; title:text; ticketClassId:text; cost:nat64; createdAt:nat64; paid:bool; attendee:principal; description:text; ticketClassTitle:text; updatedAt:nat64; eventLocation:text}; createdAt:nat64; updatedAt:nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}}) query;
    getEventsByManagment: () -> (variant {Ok:record {id:text; manager:principal; createdAt:nat64; updatedAt:nat64; events:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}}) query;
    getTicket: (principal, nat64, nat64, nat64) -> (variant {Ok:record {id:text; eventId:text; title:text; ticketClassId:text; cost:nat64; createdAt:nat64; paid:bool; attendee:principal; description:text; ticketClassTitle:text; updatedAt:nat64; eventLocation:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}});
    makePayment: (text, text) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; eventId:text; ticketClassId:text; cost:nat64; memo:nat64; eventManagerAddress:principal; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}});
    updateEvent: (record {eventStart:nat64; title:text; description:text; eventLocation:text; bannerUrl:text; eventEnd:nat64}, text) -> (variant {Ok:record {id:text; eventStart:nat64; title:text; manager:principal; tickets:vec text; ticketClasses:vec text; createdAt:nat64; description:text; soldOut:nat64; updatedAt:nat64; eventLocation:text; bannerUrl:text; eventEnd:nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}});
    updateTicketClass: (record {title:text; badgeUrl:text; cost:nat64}, text, text) -> (variant {Ok:record {id:text; title:text; badgeUrl:text; cost:nat64; createdAt:nat64; updatedAt:nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; ApprovedAdvert:text; NotFound:text; PaymentCompleted:text}});
    verifyPayment: (principal, nat64, nat64, nat64) -> (bool) query;
}
